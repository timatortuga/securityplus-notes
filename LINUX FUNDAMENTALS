LINUX FUNDAMENTALS 

LOGGING INTO A LINUX MACHINE-
_____________________________________
  The command to do so is ssh and then the username of the account, @ the IP address of the machine.
EX: ssh tryhackme@MACHINE_IP or ssh tryhackme@10.10.155.94

Then you'll  be prompted for the password. You may not see your text written out 
continue writing the event if characters are hidden, give the system a moment to load  



QUICK CHEAT CODE COMMANDS
_____________________________________
ls and find and navigating the filesystem using cd. 

In this task, we're going to learn some more commands for interacting with the filesystem to allow us to:

create files and folders
move files and folders
delete files and folders


More specifically, the following commands:

Command	Full Name	Purpose
touch	touch	Create file
mkdir	make directory	Create a folder
cp	copy	Copy a file or folder
mv	move	Move a file or folder
rm	remove	Remove a file or folder
file	file	Determine the type of a file



Downloading Files (Wget)
____________________________
wget .  This command allows us to download files from the 
web via HTTP -- as if you were accessing the file in your browser. 
We simply need to provide the address of the resource

Below, the file is named "myfile.txt" 
EX: wget https://assets.tryhackme.com/additional/linux-fundamentals/part3/myfile.txt


Transferring Files From Your Host - SCP (SSH)
Secure copy= SCP (Securely transfering files via the SSH protocol)
Working on a model of SOURCE and DESTINATION, SCP allows you to:

Copy files & directories from your current system to a remote system
Copy files & directories from a remote system to your current system

EX to COPY FROM OUR MACHINE TO A REMOTE MACHINE
      ______________________________________________
scp important.txt 
ubuntu@192.168.1.30:/home/ubuntu/transferred.txt

BREAKDOWN:
scp important.txt ...
Name of the file on the local system	important.txt 

scp important.txt 
ubuntu@192.168.1.30...
The IP address of the remote system 	192.168.1.30

scp important.txt 
ubuntu@192.168.1.30:/home/ubuntu/...
User on the remote system	ubuntu

scp important.txt 
ubuntu@192.168.1.30:/home/ubuntu/transferred.txt ...
Name that we wish to store the file as on the remote system

.
.
.

EX to COPY FROM A REMOTE MACHINE TO OUR MACHINE
      _____________________________________________
scp ubuntu@192.168.1.30:
/home/ubuntu/documents.txt notes.txt 




Serving Files From Your Host - WEB
__________________________________
Ubuntu machines come pre-packaged with python3.
    Module is called "HTTPServer". 
    This module turns your computer into a quick and easy web 
    server that you can use to serve your own file.

EX:python3 -m  http.server 
tryhackme@linux3:/webserver# python3 -m http.server
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...

Let's use wget to download the file using the 10.10.9.65 address and the name of the file.
          ____                                __________________
EX:
tryhackme@mymachine:~# wget http://10.10.9.65:8000/myfile

NOTE: Once you start the Python3 web server, 
      it will run in that terminal until you cancel it.



Viewing Process- PS
________________________

(ps)         ps command to provide a list of the running processes as our user's session 
             and some additional information such as its status code, the session that is running 
             it, how much usage time of the CPU it is using, and the name of the actual program or 
             command that is being executed:

(ps aux)    To see the processes run by other users and those that don't run from a session 
            (i.e. system processes), we need to provide aux to the ps command like so: ps aux


(top)       top gives you real-time statistics about the processes running on your system instead of 
            a one-time view

(kill)      terminate processes; there are a variety of types of signals that correlate to exactly 
            how "cleanly" the process is dealt with by the kernel.

                Below are some of the signals that we can 
                send to a process when it is killed:

                    SIGTERM - Kill the process, but allow it to do some cleanup tasks beforehand
                    SIGKILL - Kill the process - doesn't do any cleanup after the fact
                    SIGSTOP - Stop/suspend a process

(systemctl [option] [service])   this command allows us to interact with the systemd process/daemon

[option]'s       Start | Stop | Enable | Disable

echo "Hi THM",   where we expect the output to be returned to us like it is at the 
                 start. But after adding the & operator to the command, we're instead just given the 
                 ID of the echo process rather than the actual output -- as it is running in the background.

This is great for commands such as copying files because it means that we can run the command 
in the background and continue on with whatever further commands we wish to execute (without 
having to wait for the file copy to finish first)



Ctrl + Z         on our keyboard to background a process. It is also an effective way of "pausing" 
                 the execution of a script or command like in the example below:

                      This script will keep on repeating "This will keep on looping until I stop!"



